<%
   ##
   ## MySQL用のDDL(create table文)を生成するテンプレート
   ##

   ## メインプログラムからデータを受け取る  ・・・(1)
   tables     = context['tables']

   ## MySQL予約語
   keywords = <<-END
     add all alter analyze and as asc asensitive
     before between bigint binary blob both by
     call cascade case change char character check collate column
     condition connection constraint continue convert create cross
     current_date current_time current_timestamp current_user cursor
     database databases day_hour day_microsecond day_minute day_second
     dec decimal declare default delayed delete desc describe
     deterministic distinct distinctrow div double drop dual
     each else elseif enclosed escaped exists exit explain
     false fetch float for force foreign from fulltext
     goto grant group
     having high_priority hour_microsecond hour_minute hour_second
     if ignore in index infile inner inout insensitive insert
     int integer interval into is iterate
     join
     key keys kill
     leading leave left like limit lines load localtime
     localtimestamp lock long longblob longtext loop low_priority
     match mediumblob mediumint mediumtext middleint
     minute_microsecond minute_second mod modifies
     natural not no_write_to_binlog null numeric
     on optimize option optionally or order out outer outfile
     precision primary procedure purge
     read reads real references regexp release rename repeat
     replace require restrict return revoke right rlike
     schema schemas second_microsecond select sensitive
     separator set show smallint soname spatial specific sql
     sqlexception sqlstate sqlwarning sql_big_result
     sql_calc_found_rows sql_small_result ssl starting straight_join
     table terminated then tinyblob tinyint tinytext to
     trailing trigger true
     undo union unique unlock unsigned update usage use using
     utc_date utc_time utc_timestamp
     values varbinary varchar varcharacter varying
     when where while with write
     xor
     year_month
     zerofill
   END
   @keywords = {}
   keywords.split(/\s+/).each { |word| @keywords[word] = true }

   ## 予約語をエスケープする関数   ・・・(2)
   def self._(word)
     return @keywords[word.downcase] ? "`#{word}`" : word
   end

 %>
----------------------------------------------------------------------
-- DDL for MySQL
--   generated at <%= Time.now.to_s %>

----------------------------------------------------------------------
<% ## create table 文を出力   ・・・(3) %>
<% tables.each do |table| %>

-- <%= table['desc'] %>

create table <%= _(table['name']) %> (
<%
     n = table['columns'].length
     table['columns'].each_with_index do |column, i|
       flag_last_loop = n == i + 1   # ループの最後かどうか

       ## カラムの名前と型
       name  = column['name']
       type  = column['type']
       width = column['width']

       ## 型情報    ・・・(4)
       case type
       when 'char'      ;  type = 'tinyint'
       when 'short'     ;  type = 'mediumint'
       when 'int'       ;  type = 'integer'
       when 'inteter'   ;
       when 'str'       ;  type = 'varchar'; width ||= 255
       when 'string'    ;  type = 'varchar'; width ||= 255
       when 'text'      ;
       when 'float'     ;
       when 'double'    ;
       when 'bool'      ;  type = 'boolean'
       when 'boolean'   ;
       when 'date'      ;
       when 'timestamp' ;
       when 'money'     ;  type = 'decimal'
       end
       type += "(#{width})" if width

       ## enum が指定されているときは型を enum() にする  ・・・(5)
       if column['enum']
         type  = "enum(" + column['enum'].collect{|v| "'#{v}'"}.join(", ") + ")"
         width = nil
       end

       ## 制約条件   ・・・(5)
       flag_notnull = column['not-null'] && !column['serial'] && !column['primary-key']
       constraints = []
       constraints << 'auto_increment' if column['serial']
       constraints << 'not null'       if flag_notnull
       constraints << 'primary key'    if column['primary-key']
       constraints << 'unique'         if column['unique']

       ## カラム定義を出力   ・・・(6)
       name_part  = '%-20s' % _(name)
       type_part  = '%-20s' % type
       const_part = constraints.join(' ')
       comma   = flag_last_loop ? '' : ','
       ref     = column['ref']
       comment = ref ? "  -- references #{ref['table']['name']}.#{ref['name']}" : ""
 %>
   <%= name_part %> <%= type_part %> <%= const_part %><%= comma %><%= comment %>

<%
     end
 %>
<%   ## 主キーが複合キーの場合 %>
<%   if table['primary-keys'] %>
<%     pkeystr = table['primary-keys'].collect{|pkey| _(pkey)}.join(', ') %>
   , primary key (<%= pkeystr %>)
<%   end %>
);
<% end %>

