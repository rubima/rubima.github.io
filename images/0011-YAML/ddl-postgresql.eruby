<%
   ##
   ## PostgreSQL用のDDL(create table文)を生成するテンプレート
   ##

   ## メインプログラムからデータを受け取る  ・・・(1)
   tables     = context['tables']

   ## PostgreSQL予約語
   keywords = <<-END
     abort admin all analyse analyze and any as asc
     between binary bit both
     case cast char character check cluster coalesce
     collate column constraint copy cross current_date
     current_time current_timestamp current_user
     dec decimal default deferrable desc distinct do
     else end except exists explain extend extract
     false float for foreign from full
     global group
     having
     ilike in initially inner inout intersect into is isnull
     join
     leading leftlike limit listen local lock
     move
     natural nchar new not notnull null nullif numeric
     off offset old on only or order out outer overlaps
     position precision primary public
     references reset right
     select session_user setof showsome substring
     table then to trailing transaction trim true
     union unique user using
     vacuum varchar verbose
     when where
   END
   @keywords = {}
   keywords.split(/\s+/).each { |word| @keywords[word] = true }

   ## 予約語をエスケープする関数   ・・・(2)
   def self._(word)
     return @keywords[word] ? "\"#{word}\"" : word
   end

 %>
----------------------------------------------------------------------
-- DDL for PostgreSQL
--   generated at <%= Time.now.to_s %>

----------------------------------------------------------------------
<% ## create table 文を出力   ・・・(3) %>
<% tables.each do |table| %>

-- <%= table['desc'] %>

create table <%= _(table['name']) %> (
<%
     n = table['columns'].length
     table['columns'].each_with_index do |column, i|
       flag_last_loop = n == i + 1   # ループの最後かどうか

       ## カラムの名前と型
       name  = column['name']
       type  = column['type']
       width = column['width']

       ## 型情報    ・・・(4)
       case type
       when 'char'      ;
       when 'short'     ;  type = 'smallint'
       when 'int'       ;  type = 'integer'
       when 'inteter'   ;
       when 'str'       ;  type = 'varchar' ; width ||= 255
       when 'string'    ;  type = 'varchar' ; width ||= 255
       when 'text'      ;
       when 'float'     ;  type = 'real'
       when 'double'    ;  type = 'double precision'
       when 'bool'      ;  type = 'boolean'
       when 'boolean'   ;
       when 'date'      ;
       when 'timestamp' ;
       when 'money'     ;  type = 'decimal'
       end
       type += "(#{width})" if width

       ## serial 型の桁数が大きい場合は bigserial を使う  ・・・(5)
       if column['serial']
          type = width && width >= 10 ? 'bigserial' : 'serial'
       end

       ## 制約条件   ・・・(5)
       flag_notnull = column['not-null'] && !column['serial'] && !column['primary-key']
       constraints = []
       constraints << 'not null'    if flag_notnull
       constraints << 'primary key' if column['primary-key']
       constraints << 'unique'      if column['unique']
       if (ref = column['ref']) != nil
         constraints << "references #{ref['table']['name']}(#{ref['name']})"
       end

       ## カラム定義を出力   ・・・(6)
       name_part = '%-20s' % _(name)
       type_part = '%-20s' % type
       const_part = constraints.join(' ')
       comma   = flag_last_loop ? '' : ','
       comment = column['enum'] ? "  -- #{column['enum'].join(',')}" : ""

 %>
   <%= name_part %> <%= type_part %> <%= const_part %><%= comma %><%= comment %>

<%
     end
 %>
<%   ## 主キーが複合キーの場合 %>
<%   if table['primary-keys'] %>
<%     pkeystr = table['primary-keys'].collect{|pkey| _(pkey)}.join(', ') %>
   , primary key (<%= pkeystr %>)
<%   end %>
);
<% end %>

